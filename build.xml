<project name="assert" default="compile" basedir=".">

  <property name="temp.dir"  value="tmp" />

  <!-- used for building releases -->
  <property name="app.name"   value="JonsAssert" />
  <property name="app.version" value="0.5.3" />
  <property name="instrument.dir"  value="instrumented" />
  <property name="build.dir"  value="build" />
  <property name="release.cvs.tag" value="JonsAssert-0_5_3" />
  <property name="release.html.dir" value="/home/jpschewe/public_html/mtu.net/public_html" />

  <!-- some CVS properties -->
  <property name="cvs.root" value="/net/CVS-Repository" />
  <property name="cvs.module" value="assert" />

  <!-- used for *.javadoc -->
  <property name="local.java.packages" value="http://netserver.mn.mtu.net/package-docs/java" />
  <property name="local.java.projects" value="http://netserver.mn.mtu.net/package-docs/projects" />
  <property name="nightly.html.dir" value="/net/package-docs/projects" />
  <property name="mtu.net" value="http://mtu.net/~jpschewe" />
  <property name="mtu.net.offline" value="/home/jpschewe/public_html/mtu.net/public_html" />

  <target name="init">
    <tstamp />
    <uptodate property="buildJavaLexer" targetfile="${basedir}/src/net/mtu/eggplant/dbc/java.g">
      <srcfiles dir="${basedir}/src/net/mtu/eggplant/dbc" includes="JavaRecognizer.java" />
    </uptodate>
    <uptodate property="buildJava14Lexer" targetfile="${basedir}/src/net/mtu/eggplant/dbc/java14.g">
      <srcfiles dir="${basedir}/src/net/mtu/eggplant/dbc">
        <include name="Java14Recognizer.java" />
        <include name="java.g" />
      </srcfiles>
    </uptodate>
    <uptodate property="buildAssertLexer" targetfile="${basedir}/src/net/mtu/eggplant/dbc/assert.g">
      <srcfiles dir="${basedir}/src/net/mtu/eggplant/dbc" includes="AssertLexer.java" />
    </uptodate>
  </target>

  <path id="base.classpath">
    <pathelement location="${basedir}/lib/JonsInfra-0.2.jar"/>
    <pathelement location="${basedir}/lib/antlr.jar"/>
    <pathelement location="${basedir}/lib/werken.opt.jar"/>
    <pathelement location="${basedir}/lib/junit-3.8.jar"/>
  </path>

  <target name="antlrTasks" depends="init,buildJavaLexer,buildJava14Lexer,buildAssertLexer" />

  <target name="buildJavaLexer" if="buildJavaLexer">
    <java classname="antlr.Tool"
	  fork="yes"
	  failonerror="true"
	  taskname="antlr"
	  dir="${basedir}/src/net/mtu/eggplant/dbc">
      <classpath>
  	<pathelement location="${basedir}/lib/antlr.jar" />
      </classpath>
      <arg value="java.g" />
    </java>
  </target>

  <target name="buildJava14Lexer" if="buildJava14Lexer" depends="buildJavaLexer">
    <java classname="antlr.Tool"
	  fork="yes"
	  failonerror="true"
	  taskname="antlr"
	  dir="${basedir}/src/net/mtu/eggplant/dbc">
      <classpath>
  	<pathelement location="${basedir}/lib/antlr.jar" />
      </classpath>
      <arg line="-glib java.g" />
      <arg value="java14.g" />
    </java>
  </target>
  
  <target name="buildAssertLexer" if="buildAssertLexer">
    <java classname="antlr.Tool"
	  fork="yes"
	  failonerror="true"
	  taskname="antlr"
	  dir="${basedir}/src/net/mtu/eggplant/dbc">
      <classpath>
        <pathelement location="${basedir}/lib/antlr.jar" />
      </classpath>
      <arg value="assert.g" />
    </java>
  </target>
  
  <target name="compile" depends="init,antlrTasks" description="Compile everything">
  <!-- broken
  <target name="compile" depends="init">
    <antlr target="${basedir}/src/net/mtu/eggplant/dbc/java.g" />
    <antlr target="${basedir}/src/net/mtu/eggplant/dbc/java14.g" />
    <antlr target="${basedir}/src/net/mtu/eggplant/dbc/assert.g" />
    -->

    <mkdir dir="${basedir}/${build.dir}" />
    <javac srcdir="${basedir}/src"
	   destdir="${build.dir}"
	   debug="true"
	   deprecation="true">
      <classpath>
        <path refid="base.classpath"/>
      </classpath>
      <include name="net/**/*.java"/>
      <exclude name="net/mtu/eggplant/dbc/testcases/**"/>
      <exclude name="net/mtu/eggplant/dbc/test14/**"/>
    </javac>
  </target>

  <target name="test" depends="compile" description="Run the unit tests">
    <echo message="Look at the output to determine if the tests passed, the build will always succeed" />
    <!-- first instrument the test files -->
    <java fork="yes"
	  classname="net.mtu.eggplant.dbc.JonsAssert"
	  taskname="DBC"
	  failonerror="false"> <!-- so we can see what all needs fixing -->
      <arg value="-d ${basedir}/${instrument.dir}" />
      <arg value="-f" />
      <arg value="--pretty-output" />
      <arg value="${basedir}/src/net/mtu/eggplant/dbc/testcases" />
      <classpath>
        <pathelement location="${basedir}/${build.dir}"/>
        <path refid="base.classpath"/>
      </classpath>
    </java>

    <!-- instrument the 1.4 files -->
    <java fork="yes"
	  classname="net.mtu.eggplant.dbc.JonsAssert"
	  taskname="DBC"
	  failonerror="false"> <!-- so we can see what all needs fixing -->
      <arg value="-source 1.4" />
      <arg value="-d ${basedir}/${instrument.dir}" />
      <arg value="-f" />
      <arg value="--pretty-output" />
      <arg value="${basedir}/src/net/mtu/eggplant/dbc/test14" />
      <classpath>
        <pathelement location="${basedir}/${build.dir}"/>
        <path refid="base.classpath"/>
      </classpath>
    </java>

    <!-- compile newly instrumented files -->
    <javac srcdir="${basedir}/${instrument.dir}"
	   destdir="${basedir}/${build.dir}"
	   debug="true"
	   deprecation="true"
           source="1.4"
           >
      <classpath>
        <pathelement location="${basedir}/${build.dir}"/>
        <path refid="base.classpath"/>
      </classpath>
      <include name="**/*.java" />
      <!-- don't try and compile the 1.4 stuff -->
      <!--<exclude name="net/mtu/eggplant/dbc/test/Test14Compatibility.java" />-->

      <!-- JPS:debug -->
      <exclude name="net/mtu/eggplant/dbc/test/TestAssert.java" />

      <!--<include name="DefaultPackage.java" />
      <include name="net/mtu/eggplant/dbc/test/**/*.java" />-->
    </javac>

    <!-- run tests -->
    <java fork="yes" classname="junit.textui.TestRunner" 
	  taskname="junit" failonerror="false">
      <sysproperty key="ASSERT_BEHAVIOR" value="EXCEPTION" />
      <arg value="net.mtu.eggplant.dbc.test.AllTests"/>
      <classpath>
        <pathelement location="${basedir}/${build.dir}"/>
        <path refid="base.classpath"/>
      </classpath>
    </java>

    <java fork="yes" classname="junit.textui.TestRunner" 
	  taskname="junit" failonerror="false">
      <sysproperty key="ASSERT_BEHAVIOR" value="EXCEPTION" />
      <sysproperty key="ENFORCE_INHERITED_CONDITIONS" value="FALSE" />
      <arg value="net.mtu.eggplant.dbc.test.TestEnforceInherited"/>
      <classpath>
        <pathelement location="${basedir}/${build.dir}"/>
        <path refid="base.classpath"/>
      </classpath>
    </java>
  </target>

  <target name="instrument"
          depends="init"
          if="assert.present">
    <java fork="yes"
	  classname="net.mtu.eggplant.dbc.JonsAssert"
	  taskname="assert"
	  failonerror="true">
      <arg value="${basedir}/src/net" />
      <arg value="-d ${basedir}/${instrument.dir}" />
    </java>
  </target>

  <target name="compile.assert"
          depends="init,instrument"
          description="Instrument the code, then compile">
    <java classname="antlr.Tool"
	  fork="yes"
	  failonerror="true"
	  taskname="antlr"
	  dir="${basedir}/src/net/mtu/eggplant/dbc">
      <classpath>
  	<pathelement location="${basedir}/lib/antlr.jar" />
      </classpath>
      <arg value="java.g" />
    </java>

    <java classname="antlr.Tool"
	  fork="yes"
	  failonerror="true"
	  taskname="antlr"
	  dir="${basedir}/src/net/mtu/eggplant/dbc">
      <classpath>
        <pathelement location="${basedir}/lib/antlr.jar" />
      </classpath>
      <arg value="assert.g" />
    </java>

    <javac srcdir="${instrument.dir}"
	   destdir="${basedir}/${build.dir}"
	   debug="true"
	   deprecation="true">
      <classpath>
        <path refid="base.classpath"/>
      </classpath>
      <include name="net/**/*.java"/>
      <exclude name="net/mtu/eggplant/dbc/testcases/**"/>
    </javac>
  </target>

  <target name="clean"
          description="Clean up any temporary files created">
    <delete dir="${basedir}/${build.dir}" />
    <delete dir="${basedir}/${instrument.dir}" />
    <delete>
      <fileset dir="${basedir}/src" >
  	  <include name="net/mtu/eggplant/dbc/AssertLexer.*" />
  	  <include name="net/mtu/eggplant/dbc/AssertLexerTokenTypes.*" />
  	  <include name="net/mtu/eggplant/dbc/JavaLexer.*" />
  	  <include name="net/mtu/eggplant/dbc/JavaRecognizer.*" />
      	  <include name="net/mtu/eggplant/dbc/JavaTokenTypes.*" />
  	  <include name="net/mtu/eggplant/dbc/Java14Recognizer.*" />
      	  <include name="net/mtu/eggplant/dbc/Java14RecognizerTokenTypes.*" />
      </fileset>
    </delete>
  </target>

  <target name="release"
          description="Make a release, CVS tag is created manually">
    <mkdir dir="${release.html.dir}/${app.name}/${app.version}" />
           
    <!-- checkout to a temp directory -->
    <cvs cvsRoot="${cvs.root}"
         package="${cvs.module}"
         dest="${temp.dir}"
         tag="${release.cvs.tag}" />

    <!-- copy index.html, ChangeLog to web directory -->
    <copy todir="${release.html.dir}/${app.name}/${app.version}"
          flatten="true">
      <fileset dir="${temp.dir}/assert">
        <include name="ChangeLog" />
        <include name="doc/*" />
      </fileset>
    </copy>

    <!-- zip source to web directory -->
    <zip basedir="${temp.dir}"
         destfile="${release.html.dir}/${app.name}/${app.version}/${app.name}-${app.version}-src.zip"
         />

    <!-- compile -->
    <javac srcdir="${temp.dir}/assert/src"
           destdir="${temp.dir}/assert/src"
           source="1.4"
           >
      <classpath>
        <pathelement location="${temp.dir}/assert/src/" />
        <pathelement location="${temp.dir}/assert/lib/JonsInfra-0.2.jar"/>
        <pathelement location="${temp.dir}/assert/lib/antlr.jar"/>
        <pathelement location="${temp.dir}/assert/lib/werken.opt.jar"/>
        <pathelement location="${temp.dir}/assert/lib/junit-3.8.jar"/>
      </classpath>
      <include name="net/**/*.java"/>
    </javac>
    
    <!-- build the jar -->
    <jar jarfile="${release.html.dir}/${app.name}/${app.version}/${app.name}-${app.version}.jar"
         basedir="${temp.dir}/assert/src"
         excludes="**/*.java"
          />

    
    <!-- generate javadoc -->
    <antcall target="release.javadoc" />

    <!-- delete the temp files -->
    <delete dir="${temp.dir}" />
    
    <echo message="Remember to sync out to mtu.net" />
  </target>

  <!-- Javadoc targets below here -->
  <target name="local.javadoc"
          description="Build javadoc locally without external links">
    <mkdir dir="${basedir}/api" />
    <javadoc packagenames="net.mtu.eggplant.*"
             sourcepath="${basedir}/src"
             use="true"
             splitindex="true"
             version="true"
             windowtitle="${app.name}"
             destdir="${basedir}/api"
             source="1.4"
             additionalparam="-tag beaninfo:a:BeanInfo -tag test:a:Tests -tag pre:cm:PreConditions -tag post:cm:PostConditions -tag invariant:tc:Invariants -breakiterator"
             >
        <classpath>
          <path refid="base.classpath"/>
        </classpath>
      </javadoc>
  </target>

  <target name="init_javadoc">
    <mkdir dir="${basedir}/${temp.dir}" />
  </target>
  
  <!-- 0.5 javadoc -->
  <target name="0.5_javadoc" depends="init_javadoc">
    <!-- get the source out of cvs -->
    <cvs cvsRoot="/home/CVS-Repository"
	 package="assert"
	 dest="${basedir}/${temp.dir}"
	 tag="JonsAssert-0_5" />
    <!-- run javadoc on the source -->
    <mkdir dir="${mtu.net.offline}/JonsAssert/api" />
    <javadoc packagenames="net.mtu.eggplant.dbc"
	     sourcepath="${basedir}/${temp.dir}/assert/src"
	     use="true"
	     splitindex="true"
	     version="true"
	     windowtitle="JonsAssert 0.5"
	     destdir="${mtu.net.offline}/JonsAssert/api" >
      <doclet name="${doclet.name}"
	      path="${doclet.path}">
      </doclet>
      <classpath>
	<pathelement location="${basedir}/${temp.dir}/assert/src/" />
	<pathelement location="${basedir}/${temp.dir}/assert/lib/junit-3.8.jar" />
	<pathelement location="${basedir}/${temp.dir}/assert/lib/JonsInfra-0.2.jar" />
	<pathelement location="${basedir}/${temp.dir}/assert/lib/antlr.jar" />
	<pathelement location="${basedir}/${temp.dir}/assert/lib/werken.opt.jar" />
      </classpath>
      <!-- core java -->
      <link href="http://java.sun.com/j2se/1.3/docs/api/" />
      <!-- infra -->
      <link offline="true" href="${mtu.net}/JonsInfra/0.1/api" packagelistLoc="${mtu.net.offline}/JonsInfra/0.1/api" />
      <!-- junit -->
      <link offline="true" href="${mtu.net}/java/junit/3.7" packagelistLoc="${mtu.net.offline}/java/junit/3.7" />
      <!-- antlr -->
      <link offline="true" href="${mtu.net}/java/antlr/2.7.1" packagelistLoc="${mtu.net.offline}/java/antlr/2.7.1" />
      <!-- werken.opt -->
      <link href="http://code.werken.com/werken.opt/build/apidocs/" />
    </javadoc>
    
    <!-- delete the temp files -->
    <delete dir="${basedir}/${temp.dir}" />
  </target>

  <target name="nightly.javadoc"
          description="Do a nightly build of the Javadoc to my fileserver">
    <mkdir dir="${basedir}/${temp.dir}" />    
    <!-- get the source out of cvs -->
    <cvs cvsRoot="${cvs.root}"
         package="${cvs.module}"
         dest="${basedir}/${temp.dir}"
         quiet="true" />

    <!-- build the lexers -->
    <antcall target="antlrTasks">
      <param name="basedir" value="${basedir}/${temp.dir}/assert" />
    </antcall>
      
    <!-- run javadoc on the source -->
    <mkdir dir="${nightly.html.dir}/${app.name}" />
    <javadoc packagenames="net.mtu.eggplant.*"
             sourcepath="${basedir}/${temp.dir}/assert/src"
             use="true"
             splitindex="true"
             version="true"
             windowtitle="${app.name}"
             destdir="${nightly.html.dir}/${app.name}"
             source="1.4"
             additionalparam="-tag beaninfo:a:BeanInfo -tag test:a:Tests -tag pre:cm:PreConditions -tag post:cm:PostConditions -tag invariant:tc:Invariants -breakiterator"
             >
      <classpath>
        <path refid="base.classpath"/>
      </classpath>
      <!-- core java -->
      <link href="${local.java.packages}/jdk-1.4.0/api/"/>
      <!-- junit -->
      <link href="${local.java.packages}/junit-3.8/" />
      <!-- antlr -->
      <link href="${local.java.packages}/antlr/javadoc/" />
      <!-- infra -->
      <link href="${local.java.projects}/JonsInfra/" />
    </javadoc>
    
    <!-- delete the temp files -->
    <delete dir="${basedir}/${temp.dir}" />
  </target>

  <target name="release.javadoc">
    <mkdir dir="${temp.dir}" />
    <!-- get the source out of cvs -->
    <cvs cvsRoot="${cvs.root}"
         package="${cvs.module}"
         dest="${temp.dir}"
         tag="${release.cvs.tag}" />
    <!-- run javadoc on the source -->
    <mkdir dir="${release.html.dir}/${app.name}/${app.version}/api" />
    <javadoc packagenames="net.mtu.eggplant.*"
             sourcepath="${temp.dir}/assert/src"
             use="true"
             splitindex="true"
             version="true"
             windowtitle="${app.name}-${app.version}"
             destdir="${release.html.dir}/${app.name}/${app.version}/api"
             additionalparam="-tag beaninfo:a:BeanInfo -tag test:a:Tests -tag pre:cm:PreConditions -tag post:cm:PostConditions -tag invariant:tc:Invariants -breakiterator"
             >
        <classpath>
          <pathelement location="${temp.dir}/assert/src/" />
          <pathelement location="${temp.dir}/assert/lib/junit-3.8.jar" />
          <pathelement location="${temp.dir}/assert/lib/JonsInfra-0.2.jar" />
          <pathelement location="${temp.dir}/assert/lib/antlr.jar" />
          <pathelement location="${temp.dir}/assert/lib/werken.opt.jar" />
            </classpath>
        <!-- core java -->
        <link offline="true"
              href="http://java.sun.com/j2se/1.4/docs/api/"
              packagelistLoc="${local.java.packages}/jdk-1.4.0/api/" />

        <!-- JonsInfra -->
        <link offline="true"
              href="${mtu.net}/JonsInfra/0.2/api"
              packagelistLoc="${mtu.net.offline}/JonsInfra/0.2/api" />

        <!-- junit -->
        <link offline="true"
              href="http://www.junit.org/junit/javadoc/3.8"
              packagelistLoc="${local.java.packages}/junit-3.8/" />

        <!-- antlr -->
        <link offline="true"
              href="http://www.antlr.org/javadoc/"
              packagelistLoc="${local.java.packages}/antlr/javadoc/" />

        <!-- werken.opt -->
        <link href="http://code.werken.com/werken.opt/build/apidocs/" />
      </javadoc>
    
    <!-- delete the temp files -->
    <delete dir="${temp.dir}" />
  </target>
  
</project>