2000-02-04  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* java.g: Roughed out an idea on how to do methods.  Added some
	stubs in Symtab for this.  Still need to implement them.  Figured
	out how to get all of the information for creating an AssertMethod
	object.

	* AssertTools.java: findSuperMethod won't work like I expected.
	This is going to make things REAL difficult.

2000-01-29  Jon Schewe  <schewe@tcfreenet.org>

	* Symtab.java: added stack of files just like the class stack so
	that multiple files can be parsed recursively.
	Added code to find the source for an interface.  Still needs some
	enhancements though.

	* java.g: Added calls for creating inner classes too and the end
	of classes.

2000-01-22  Jon Schewe  <schewe@tcfreenet.org>

	* AssertMethod.java: Added stuff for static and private methods,
	so I can tell the difference when I generate code.

2000-01-22  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* CodeGenerator.java: Added roughed out version of how to handle constructors

	* java.g: Added CodeFragment objects to hold generated code and
	some points for sorting so that the files can be instrumented in
	some sane manner 

2000-01-20  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* assert.g: Added column tracking code

	* java.g: Added code for keeping track of columns

2000-01-16  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* CodeGenerator.java: Added code to generate invariant checks.

	* README (BUGS): Added section on reporting bugs.

	* java.g: Still trying to get column numbers to work right.

	* assert.g: now creates AssertTokens for the various conditions so
	that I don't have to duplicate the work the lexer has done later.

	* AssertToken.java: Added so that I don't need to reparse the
	condition and message that are found  in the lexer.

	* MyToken.java: created for keeping track of columns

2000-01-15  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* CodeGenerator.java: Created to generate code for various conditions

	* java.g: Now I generate code for @assert

2000-01-11  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* Added some more test cases to the test directory.

2000-01-08  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* java.g: Should parse everything correctly now!  Now we just need
	to generate code and find interfaces :)

	* assert.g: Handels ()'s in the condition!

	* MethodSkeletons.java: refined ideas of how the pre and post
	conditions are checked

2000-01-03  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* TestAssert.java: Added some more code that can break the lexer :(

	* MethodSkeletons.java: Working out how to actually signal the assertions.

	* AssertTools.java: Generalized code to find the super class method.

	* AssertMethod.java: Added stubs for methods and slots that should
	be required for methods to be handeled correctly.

	* java.g: list of mports should be correctly built, still need to
	figure out how to resolve interfaces

2000-01-02  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* README (BUGS): Added bug list.

2000-01-01  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* java.g: removed stuff to build AST

1999-12-30  Jon Schewe  <jpschewe@eggplant.mtu.net>

	* java.g (WS): Reindented with antlr-mode (should be more readable
	now), added comments for where code should be generated to check
	pre/post/invariant conditions.

	* assert.g: Reindented with antlr-mode and commented out extra
	print statements.

	* java.g: initial entry, supports pre and post conditions and
	invariants.  Doesn't generate any code yet though.

