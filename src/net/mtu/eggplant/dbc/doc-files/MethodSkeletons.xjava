// -*- jde -*-
/*
  This file is meant to let others know how I intend to instrument files so
  that they know what types of method names may cause problems and to ease in
  debugging the code that is generated.  The code generated isn't exactly what
  I have here, but it should be close.

  remember only to check invariants on public instance methods, protected methods, constructor exit

  Replace all of the package names '.' with '_'

  All variables created here will have jps__ in front of them except.

  invariants are ANDed with super class
  preconditions are ORed with super class
  postconditions are ANDed with super class
  This puts the burden on the person using the instrumented method rather than the person writing the method.

  Each time a method is called it is "locked".  When a method is called and it
  is ready locked it returns true immediatly to avoid infinite recursion.
*/

//before
public Object methodFoo(Object param1) {
  return param1;
}

//after
public Object methodFoo(Object param1) {
  if(!jps__<packageName>_<className>_checkInvariant()) {
    AssertTools.invariantFailed(AssertTools.getCurrentAssertionViolation());
  }
  if(!jps__<packageName>_<className>_check<methodName>PreConditions(param1, param2, ...)) {
    AssertTools.preConditionFailed(AssertTools.getCurrentAssertionViolation());
  }
  {
    final Object jps__retVal<classname> = param1;
    
    if(!jps__<packageName>_<className>_checkInvariant()) {
      AssertTools.invariantFailed(AssertTools.getCurrentAssertionViolation());
    }
    if(!jps__<packageName>_<className>_check<methodName>PostConditions(jps__retVal<classname>, param1, ...)) {
      AssertTools.postConditionFailed(AssertTools.getCurrentAssertionViolation());
    }
    return jps__retVal<classname>;
  }
}

//before
public void methodFoo(Object param1)
  throws IOException {
  System.out.println("test");
}

//after
public void methodFoo(Object param1)
  throws IOException {
  if(!jps__<packageName>_<className>_checkInvariant()) {
    AssertTools.invariantFailed(AssertTools.getCurrentAssertionViolation());
  }
  if(!jps__<packageName>_<className>_check<methodName>PreConditions(param1, param2, ...)) {
    AssertTools.preConditionFailed(AssertTools.getCurrentAssertionViolation());
  }
  boolean jps_foundException<classname> = false;
  try {
    System.out.println("test");
  } catch(final Throwable jps_throwable<classname>) {
    jps_foundException<classname> = true;
    if(jps_throwable<classname> instanceof Error) {
      throw (Error)jps_throwable<classname>;
    } else if(jps_throwable<classname> instanceof RuntimeException) {
      throw (RuntimeException)jps_throwable<classname>;
    } else if(jps_throwable<classname> instanceof IOException) {
      throw (IOException)jps_throwable<classname>;
    } else {
      throw new RuntimeException("JonsAssert DBC - Invalid code: Checked exception found, but not declared in throws clause");
    }
  } finally {
    if(!jps_foundException<classname>) {
      if(!jps__<packageName>_<className>_checkInvariant()) {
        AssertTools.invariantFailed(AssertTools.getCurrentAssertionViolation());
      }
      if(!jps__<packageName>_<className>_check<methodName>PostConditions(jps__retVal<classname>, param1, ...)) {
        AssertTools.postConditionFailed(AssertTools.getCurrentAssertionViolation());
      }
    }
  }
}

/**
 * Cache the interfaces
 */
transient private Object[] _jps__interfaceInstanceCache;
private void jps__initializeInterfaceInstanceCache() {
  if(null == _jps__interfaceInstanceCache) {
    final Class[] dbcInterfaces = AssertTools.findAssertClassInterfaces(<className>.class.getInterfaces());
    //FIX should dbcInterfaces contain ALL DBC interfaces, all the way up the
    //heirarchy?  The only problem I can think of is memory overhead.  Can't
    //do that or we might not get the inheritance correct.  That means we need
    //to do the search in the methods.
  }
}

/**
   Logic:  if(super preconditions) {
              return true;
           }
           if( OR(interface preconditions) ) {
             return true;
           }
           return AND(pre condtitions for this class);
              
**/
transient private java.lang.reflect.Method _jps__<packageName>_<className>_<methodName>_check<methodname>PreConditions;
protected boolean jps__<packageName>_<className>_check<methodname>PreConditions(param1, param2, ...) {
  if(!AssertTools.ENFORCE_PRE_CONDITION) { return true; }

  final MethodLock jps__methodLock = AssertTools.lockMethod("jps__<packageName>_<methodName>_check<methodname>PreConditions_paramType1_paramType2_...", this/*null*/);
  if(null == jps__methodLock) { return true; }

  if(AssertTools.ENFORCE_INHERITED_CONDITIONS) {
    Class thisClass;
    try {
      final String className = "<fill in class name>";
      thisClass = Class.forName(className);
    }
    catch(ClassNotFoundException cnfe) {
      AssertTools.internalError("Got error getting the class object for class " + className + " " + cnfe);
    }

    Object retVal = null;
    if(_jps__<packageName>_<methodName>_check<methodname>PreConditions == null) {
      final Class[] methodArgs = {param1Type.class, param2Type.class, ...};
      _jps__<packageName>_<methodName>_check<methodname>PreConditions = AssertTools.findSuperMethod(thisClass, "check<methodname>PreConditions", methodArgs);
      if(_jps__<packageName>_<methodName>_check<methodname>PreConditions == null) {
        _jps__<packageName>_<methodName>_check<methodname>PreConditions = AssertTools.NO_METHOD;
      }
    }

    if(_jps__<packageName>_<methodName>_check<methodname>PreConditions != AssertTools.NO_METHOD) {
      //invoke it, bail on exceptions
      Object[] args = new Object[0];
      try {
        retVal = _jps__<packageName>_<methodName>_check<methodname>PreConditions.invoke(this, args);
      }
      catch(IllegalAccessException iae) {
        AssertTools.internalError("Not enough access executing superClass check<methodName>PreConditions: " + iae.getMessage());
      }
      catch(IllegalArgumentException iae) {
        AssertTools.internalError("IllegalArgument executing superClass check<methodName>PreConditions: " + iae.getMessage());
        //should never see, internal error
      }
      catch(java.lang.reflect.InvocationTargetException ite) {
        ite.getTargetException().printStackTrace();
      }
    }

    if(retVal == null) {
      AssertTools.internalError("got null check<methodName>PreConditions");
    }
    else if(! (retVal instanceof Boolean) ) {
      AssertTools.internalError("got something odd from check<methodName>Preconditions: " + retVal.getClass());
    }


    if(!staticMethod && publicMethod) {
      //[jpschewe:20000213.1603CST] FIX do interface pre conditions first and
      //keep track of which interface they're from
         
      final Class[] interfaces = thisClass.getInterfaces();
      for(int i=0; i<interfaces.length; i++) {
        //find methods on super interfaces to call.  This return value needs to
        //be cached.  Perhaps we should also have a flag that allows us to skip
        //checking on interfaces all together that is separate from
        //ENFORCE_INHERITED_CONDITIONS

        //actually should probably create an instance of ..._AssertClass with
        //this and then cache those instances.
      
        //This method should look first for the dbc class, then for the
        //appropriate method on the given interface, if not found continue to
        //search up each super interface until a method is found and return the
        //union of all methods.
        final Method[] methods = AssertTools.findInterfaceMethod(interfaces[i], "check<methodname>PreConditions", methodArgs);
        //invoke on each method ORing the result
      }
    }
  
    // OR, as soon as a true is seen, return true;  
    if(((Boolean)retVal).booleanValue()) {
      AssertTools.unlockMethod(jps__methodLOck);
      return true;
    }
  }
  
  //for <condition> (conditions)
  if(! <condition> ) {
    AssertionViolation av = new AssertionViolation((<message> != null ? <message> : "") + "\n" + <condition>);
    AssertTools.setCurrentAssertionViolation(av);

    AssertTools.unlockMethod(jps__methodLock);
    return false;
  }
  //end for

  AssertTools.unlockMethod(jps__methodLock);
  return true;
}


/**
   Logic:  if(!super postconditions) {
              return false;
           }
           if( !AND(interface postconditions) ) {
             return false;
           }
           return AND(postcondtitions for this class);
              
**/
transient private java.lang.reflect.Method _jps__<packageName>_<className>_<methodName>_check<methodname>PostConditions;
protected boolean jps__<packageName>_<className>_check<methodname>PostConditions(jps__retVal, param1, ...) {

  /* Just like check checkPreconditions, except that the superclass conditions
     as ANDed rather then ORed. */

  // AND, as soon as a false is seen, return false, looking up superclasses and interfaces
  
  if(! ((Boolean)retVal).booleanValue()) {
    return false;
  }

  //check actual conditions here
}


/**
   Logic:  if(!super invariants) {
              return false;
           }
           if( !AND(interface invariants) ) {
             return false;
           }
           return AND(invariants for this class);
              
**/
transient private java.lang.reflect.Method _jps__<packageName>_<methodName>_checkInvariant;
protected boolean jps__<packageName>_<methodName>_checkInvariant() {
  if(!AssertTools.ENFORCE_INVARIANT_CONDITION) { return true; }

  final MethodLock jps__methodLock = AssertTools.lockMethod("jps__<packageName>_<methodName>_checkInvariant", this/*null*/);
  if(null == jps__methodLock) { return true; }

  if(AssertTools.ENFORCE_INHERITED_CONDITIONS) {
    Class thisClass;
    try {
      final String className = "<fill in class name>";
      thisClass = Class.forName(className);
    }
    catch(ClassNotFoundException cnfe) {
      AssertTools.internalError("Got error getting the class object for class " + className + " " + cnfe);
    }

    //find the super method
    if(_jps__<packageName>_<methodName>_checkInvariant == null) {
      final Class[] methodArgs = new Class[0];
      _jps__<packageName>_<methodName>_checkInvariant = AssertTools.findSuperMethod(thisClass, "checkInvariant", methodArgs);
      if(_jps__<packageName>_<methodName>_checkInvariant == null) {
        _jps__<packageName>_<methodName>_checkInvariant = AssertTools.NO_METHOD;
      }
    }

    if(_jps__<packageName>_<methodName>_checkInvariant != AssertTools.NO_METHOD) {
      //invoke it, bail on exceptions
      Object[] args = new Object[0];
      try {
        retVal = _jps__<packageName>_<methodName>_checkInvariant.invoke(this, args);
      }
      catch(IllegalAccessException iae) {
        AssertTools.internalError("Not enough access executing superClass checkInvariant: " + iae.getMessage());
      }
      catch(IllegalArgumentException iae) {
        AssertTools.internalError("IllegalArgument executing superClass checkInvariant: " + iae.getMessage());
        //should never see, internal error
      }
      catch(java.lang.reflect.InvocationTargetException ite) {
        ite.getTargetException().printStackTrace();
      }
    }

    if(retVal == null) {
      AssertTools.internalError("got null checkInvariant");
    }
    else if(! (retVal instanceof Boolean) ) {
      AssertTools.internalError("got something odd from checkInvariant: " + retVal.getClass());
    }

    if(!((Boolean)retVal).booleanValue()) {
      AssertTools.unlockMethod(jps__methodLock);
      return false;
    }
  }
  
  //[jpschewe:20000116.1749CST] FIX still need to add to this do interface
  //invariants first and keep track of which interface they're from
  
  //for <condition> (conditions)
  if(! <condition> ) {
    AssertionViolation av = new AssertionViolation((<message> != null ? <message> : "") + "\n" + <condition>);
    AssertTools.setCurrentAssertionViolation(av);

    AssertTools.unlockMethod(jps__methodLock);
    return false;
  }

  AssertTools.unlockMethod(jps__methodLock);
  return true;
}


//preconditions on constructor
//Before
public class Test {
  /**
     @pre (i > 0)
     @pre (checkValue(i))
  **/
  public Test(int i) {
    System.out.println("in constructor " + i);
  }

  /**
     @pre (i > 0)
     @pre (checkValue(i))
  **/
  public Test(int i, float t) {
    System.out.println("in constructor " + i + " " + t);
  }
}
  
//After
public class Test {
  /**
     @pre (i > 0)
     @pre (checkValue(i))
  **/
  public Test (int i) {
    // -- start output from generatePreCondtitionCall 
    this(i, new JPS_<packageName>_Test_AssertDummy(i), true, ...);
    //standard check invariant call
    if(!jps__<packageName>_Test_checkInvariant()) {
      AssertTools.invariantFailed(AssertTools.getCurrentAssertionViolation());
    }
    //standard post condition call for void method
    if(!jps__<packageName>_Test_checkTestPostConditions(i)) {
      AssertTools.postConditionFailed(AssertTools.getCurrentAssertionViolation());
    }
  }
  private Test(int i, JPS_<packageName>_Test_AssertDummy ad, <some number of extra boolean parameters to uniquify signature>) {
    // -- end output from generatePreConditionCall
    System.out.println("in constructor " + i);
  }

  /**
     @pre (i > 0)
     @pre (checkValue(i))
  **/
  public Test (int i, float t) {
    // -- start output from generatePreCondtitionCall 
    this(i, new JPS_<packageName>_Test_AssertDummy(i, t), true, ...);
    //standard check invariant call
    if(!jps__<packageName>_Test_checkInvariant()) {
      AssertTools.invariantFailed(AssertTools.getCurrentAssertionViolation());
    }
    //standard post condition call for void method
    if(!jps__<packageName>_Test_checkTestPostConditions(i, t)) {
      AssertTools.postConditionFailed(AssertTools.getCurrentAssertionViolation());
    }
  }
  private Test(int i, float t, JPS_<packageName>_Test_AssertDummy ad, <some number of extra boolean parameters to uniquify signature>) {
    // -- end output from generatePreConditionCall
    System.out.println("in constructor " + i + " " + t);
  }

  //NOTE: Need to ensure that all AssertDummy classes are contained within the
  //outermost class.  It's not allowed in inner classes.
  
  //Put all check pre/post methods at end of class along with any AssertDummy classes
  
  //Standard preCondition methods here, these will be static though
  static final class JPS_<packageName>_Test_AssertDummy {
    public JPS_<packageName>_Test_AssertDummy(int i) {
      //Standard precondition call    
      if(!jps__<packageName>_Test_checkTestPreConditions(i)) {
        AssertTools.preConditionFailed(AssertTools.getCurrentAssertionViolation());
      }
    }
    public JPS_<packageName>_Test_AssertDummy(int i, float t) {
      //Standard precondition call    
      if(!jps__<packageName>_Test_checkTestPreConditions(i, t)) {
        AssertTools.preConditionFailed(AssertTools.getCurrentAssertionViolation());
      }
    }
  }
    
}



//ideas for implemented interface checks
//Before
public interface Interface {
  
  /**
     @pre (foo(i) > 5)
  **/
  public boolean preCond(int i);

  public boolean foo(int i);
}

//After
public interface Interface {
  
  /**
     @pre (foo(i) > 5)
  **/
  public boolean preCond(int i);

  public boolean foo(int i);
  
  final class JPS__<packageName>_<interfaceName>_DBCClass implements Interface {
    
    //FIX needs to implement methods from superinterfaces, but not the
    //pre/post conditions.  Just need to handle the delegate part.  This is
    //probably a good place for a proxy, otherwise we need to know all of the
    //methods at compile time.  This would require that I make an interface
    //out of the DBC class and delegate to it...
    
    private Class[] _dbcInterfaceCache;
    private Interface _delegate;
    public JPS__<packageName>_<interfaceName>_AssertClass(final Interface delegate) {
      _delegate = delegate;
      //Do some caching
      final Class[] interfaces = Interface.class.getInterfaces();
      _dbcInterfaceCache = AssertTools.findAssertClassInterfaces(interfaces);
    }

    public boolean preCond(int i) {
      //just delegate, condition checking will be done by class that really
      //implements the interface
      return _delegate.preCond(i);
    }

    //this can't be standard because of interface checking
    public boolean jps__checkpreCondPreConditions(int i) {
      if(!AssertTools.ENFORCE_PRE_CONDITION) { return true; }

      final MethodLock methodLock = AssertTools.lockMethod("jps__<packageName>_<methodName>_check<methodname>PreConditions_paramType1_paramType2_...", this/*null*/);
      if(null == methodLock) { return true; }

      if(AssertTools.ENFORCE_INHERITED_CONDITIONS) {
      
        //FIX Look in interface cache to find which interfaces to search in and
        //then cache the methods found.

        //FIX invoke cached methods and do appropriate boolean logic on return
        //values
      }
      
      if(! (foo(i) > 5) ) {
        return false;
      }
    
      return true;
    }
    
    public boolean jps__checkpreCondPostConditions(boolean jps__retVal, int i) {
      //do same looking up the interface heirarchy
      return true;
    }

    public boolean foo(int i) {
      return _delegate.foo(i);
    }

    public boolean jps__checkfooPreConditions(int i) {
      //just like preCond without first check statement
      return true;
    }

    public boolean jps_checkfooPostConditions(int i) {
      //just like preCond without first check statement
      return true;
    }

    public boolean jps__checkInvariant() {
      //need to look up interface heirarchy
      return true;
    }
  }
}

